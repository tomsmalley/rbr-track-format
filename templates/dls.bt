// Animations and replay cameras

// Any of the unknown parts are named unknown_address, where the address is
// taken from the rally school stage dls file.

// If there are errors loading the dls file, the game creates dlserrors.log.
// For example:
// 12-Sep-20 16:58:14 Loading DLS data of stage 71,
//   animationIdsOffset = 0x658c,
//   count = 0,
//   animation id name offsets out of range: NONE,
//   animationSetsOffset = 0x38,
//   count = 1,
//   anim set header 0,
//   replay camera channels out of range: 3(60351)
// 12-Sep-20 17:24:31  RBR crashed while loading data

//-----------------------------------------------------------------------------
// Common Types
//-----------------------------------------------------------------------------

typedef struct Position {
  float x;
  float y;
  float z;
};

//-----------------------------------------------------------------------------
// Animation Sets and associated types
//-----------------------------------------------------------------------------

// Pointers to and sizes of the descriptors
typedef struct {
  int descriptor_address <format=hex>;
  int descriptor_size <format=hex>;
} AnimationSetDescriptorAddress;

// Descriptors contain the lengths of internal arrays and pointers to the
// start of them
typedef struct {
  int unknown_4;
  int camera_ids_count;
  int camera_triggers_count;
  int anim_triggers_count;
  // Unknown/unused?
  int unknown_count;
  int camera_keyframes_count;
  int trigger_events_count;
  int unknown_8_count;
  int unknown_9;

  // Each of these corresponds to the above counts
  int camera_ids_address <format=hex>;
  int camera_triggers_address <format=hex>;
  int anim_triggers_address <format=hex>;
  int unknown_address <format=hex>; // Typically the same address as the next item
  int camera_keyframes_address <format=hex>;
  int trigger_events <format=hex>;
  int unknown_8_address <format=hex>;
  int unknown_0x43AC_address <format=hex>;
} AnimationSetDescriptor;

typedef struct {
  int camera_id <format=hex>;
  int flags;
} CameraID;

// This defines the positions along the driveline at which to switch to certain
// replay cameras.
typedef struct {
  int camera_channel; // Index into the camera ID array
  float distance_travelled;
  // Seems to be one or zero, but also doesn't have an effect?
  // This is always set to 1 a tiny bit before it's set to 0.
  int unknown;
} CameraTrigger;

// Points at which animations are triggered (like the camera guy getting out
// of the way)
// TODO the location of the camera guy at the start of New Bobs is random. What controls this?
typedef struct {
  int id <format=hex>;
  float distance_travelled;
  float unknown;
} AnimTrigger;

typedef struct {
  int camera_id <format=hex>;
  // 4 = ???
  // 8 = ???
  // 12 = fov key frame
  // 16 = ???
  int mode;
  int count;
  int unknown_4;
  typedef struct {
    int unknown_5;
    float fov_driveline_distance;
    float fov;
    float unknown_6;
    float unknown_7;
    float unknown_8;
    float unknown_9;
  } KeyFrame;
  KeyFrame keyframes[count];
} KeyFrames;

// This defines pace note and checkpoint events which should be triggered
// along the driveline
typedef struct {
  enum <int> Event {
    Note_HairpinLeft = 0,
    Note_Left90 = 1,
    Note_KLeft = 2,
    Note_MediumLeft = 3,
    Note_FastLeft = 4,
    Note_EasyLeft = 5,
    Note_EasyRight = 6,
    Note_FastRight = 7,
    Note_MediumRight = 8,
    Note_KRight = 9,
    Note_Right90 = 10,
    Note_HairpinRight = 11,
    Note_Twisty = 12,
    Note_Distance = 13,
    Note_Narrows = 14,
    Note_Wideout = 15,
    Note_Overcrest = 16,
    Note_Ford = 17,
    Note_Care = 18,
    Note_Bump = 19,
    Note_Jump = 20,

    // These actually control the timing
    Event_Start = 21,
    Event_Finish = 22,
    Event_CheckPoint = 23,
    Event_EndStage = 24,

    Note_FlatRight = 25,
    Note_FlatLeft = 26,
    Note_Bridge = 27,
    Note_GoStraight = 28,
    Note_KeepRight = 29,
    Note_KeepLeft = 30,
    Note_KeepMiddle = 31,
    Note_Caution = 32,
  } event;
  struct Flags {
    enum <byte> B1 {
      Modifier_Narrows = 1,
      Modifier_Wideout = 2,
      Modifier_Tightens = 4,
      Modifier_DontCut = 32,
      Modifier_Cut = 64,
      Modifier_TightensBad = 128,
    } b1;
    // These are separate because they can be combined. I haven't worked out
    // all of the possible combinations, but most will be ignored.
    enum <byte> B2 {
      Modifier_Long = 4,
      Modifier_Maybe = 32,
    } b2;
    short:8;
  } flags;
  float distance_travelled;
} TriggerEvent;

// TODO what is this used for?
typedef struct Unknown_0x43AC {
  int count;
  int items[count];
} Unknown_0x43AC;

typedef struct (AnimationSetDescriptor &descriptor) {
  CameraID camera_ids[descriptor.camera_ids_count];
  CameraTrigger camera_triggers[descriptor.camera_triggers_count];
  AnimTrigger anim_triggers[descriptor.anim_triggers_count];
  struct CameraKeyFrames(int size) {
    KeyFrames keyframes[size] <optimize=false>;
  } camera_keyframes(descriptor.camera_keyframes_count); // Wrapped because optimize=false arrays don't collapse
  TriggerEvent trigger_events[descriptor.trigger_events_count];
  Unknown_0x43AC unknown_0x43AC;
} AnimationSet;

//-----------------------------------------------------------------------------
// File definition
//-----------------------------------------------------------------------------

char header[0x8] <comment="DATAANIM backwards">;
if (header != "MINAATAD") return "Incorrect header";

int unknown_0x8;
int unknown_0xC;

// Pointers to the sections of the file
struct Addresses {
  int animation_sets <format=hex>;
  int drive_line <format=hex>;
  int camera_positions <format=hex>;
  int camera_specs <format=hex>;
  int unknown_0x6570 <format=hex>;
  int unknown_0x6574 <format=hex>;
  int unknown_0x6578 <format=hex>;
  int driveline_string <format=hex>;
  int finish_line_position <format=hex>;
  int animation_ids <format=hex>;
} addresses;

struct AnimationSets {
  // In track 61, Fraizer Wells, this is set to 3.
  int set_count;
  AnimationSetDescriptorAddress descriptor_addresses[set_count];
  AnimationSetDescriptor descriptors[set_count];
  local int i;
  for (i = 0; i < set_count; i++) {
    AnimationSet sets(descriptors[i]) <optimize=false>;
    // Sanity checks: we might be missing data if these are used
    if (descriptors[i].unknown_count != 0) return "AnimationSets: SetSpecs: unknown_count is not 0";
    if (descriptors[i].unknown_8_count != 0) return "AnimationSets: SetSpecs: unknown_8_count is not 0";
    if (descriptors[i].unknown_4 != 0) return "AnimationSets: SetSpecs: unknown_4 is not 0";
  }
} animation_sets;

struct CameraPositions {
  int count;
  typedef struct {
    int camera_id <format=hex>;
    int camera_id_2 <format=hex>;
    int driveline_id <format=hex>;
    int unknown_id <format=hex>;
    // Position of camera in world coordinates
    Position position;
    // All angles are specified in degrees. This is only used for fixed cameras.
    struct Angle {
      // Angle from horizontal. Negative looks upwards.
      float pitch;
      // Angle from horizontal. Positive tilts camera clockwise.
      float roll;
      // 0 Looks in positive Y direction?
      // Positive values turn camera clockwise in plan view.
      float yaw;
    } angle;
    float unknown_5[3]; // All ones?
    int unknown_6;
  } CameraPosition;
  CameraPosition items[count];
} camera_positions;

struct DriveLine {
  int count;
  typedef struct {
    // ID like value
    int driveline_id <format=hex>;
    int unknown_id <format=hex>;
    // This contains some positions which draw out the road (at least on the
    // rally school stage).
    int inner_count;
    // I think these are spline control points.
    typedef struct {
      float unknown_1;
      Position position;
      typedef struct {
        float v[3];
      } Vector3;
      // Appears to be something like a heading. Adding these to positions
      // approximately results in the next point.
      Vector3 control_point_1;
      // Usually a negated version of the vector above.
      Vector3 control_point_2;
      // Distance travelled down the driveline so far
      float distance;
    } DriveLinePoint;
    DriveLinePoint points[inner_count];
  } DriveLinePart;
  DriveLinePart parts[count] <optimize=false>;
} drive_line;

struct CameraSpecs {
  int count;
  typedef struct {
    int camera_id <format=hex>;
    // mode=0: Fixed camera - uses the angle specified in the camera position section.
    // mode=-1: Look at car
    // mode=CameraID: Look at the position of another camera
    // Other modes appear to be interpreted as 0.
    int mode <format=hex>;
    float unknown_2;
    // 0: no wobble. Sensible values are less than 0.5.
    float wobble_factor;
    float unknown_4;
    float unknown_5;
  } CameraSpec;
  CameraSpec cameras[count];
} camera_specs;

int unknown_0x6570;
int unknown_0x6574;
int unknown_0x6578;
typedef struct {
  float unknown_1;
  float unknown_2;
  float unknown_3;
  float unknown_4;
} Unknown_0x6578;
Unknown_0x6578 unknown_0x6578_arr[unknown_0x6578];

struct FinishLinePosition {
  Position position;
  float radius;
} finish_line_position;

struct AnimationIds {
  int count;
  typedef struct {
    int camera_id <format=hex>;
    int unknown_2;
  } AnimationId;
  AnimationId items[count];
} animation_ids;

// TODO I don't know what this is used for
struct DrivelineString {
  int length;
  char str[length];
} driveline_string;