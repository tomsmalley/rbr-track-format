// Animations and replay cameras

// Any of the unknown parts are named unknown_address, where the address is
// taken from the rally school stage dls file.

// If there are errors loading the dls file, the game creates dlserrors.log.
// For example:
// 12-Sep-20 16:58:14 Loading DLS data of stage 71,
//   animationIdsOffset = 0x658c,
//   count = 0,
//   animation id name offsets out of range: NONE,
//   animationSetsOffset = 0x38,
//   count = 1,
//   anim set header 0,
//   replay camera channels out of range: 3(60351)
// 12-Sep-20 17:24:31  RBR crashed while loading data

// Common types

typedef struct Position {
  float x;
  float y;
  float z;
};

// File starts here

char header[0x8] <comment="DATAANIM backwards">;
if (header != "MINAATAD") return "Incorrect header";

int unknown_0x8;
int unknown_0xC;

struct Addresses {
  int animation_sets <format=hex>;
  int drive_line <format=hex>;
  int camera_positions <format=hex>;
  int camera_specs <format=hex>;
  int unknown_0x6570 <format=hex>;
  int unknown_0x6574 <format=hex>;
  int unknown_0x6578 <format=hex>;
  int driveline_string <format=hex>;
  int finish_line_position <format=hex>;
  int animation_ids <format=hex>;
} addresses;

struct AnimationSets {
  int unknown_1;
  int unknown_2;
  int unknown_3;
  int unknown_4;
  int camera_channel_count;
  int camera_line_point_count;
  int b_count;
  int unknown_count;
  int camera_keyframes_count;
  int unknown_0x41E4_count;
  int unknown_8;
  int unknown_9;
  int camera_channels_address_1 <format=hex>;
  int replay_camera_line_address <format=hex>;
  int bs_address <format=hex>;
  int unknown_address <format=hex>;
  int camera_keyframes_address <format=hex>;
  int unknown_0x41E4_address <format=hex>;
  int camera_channels_address_2 <format=hex>;
  int unknown_0x43AC_address <format=hex>;
} animation_sets;

// Camera ID array.
typedef struct {
  int camera_id <format=hex>;
  int unknown;
} CameraChannel;
CameraChannel camera_channels[animation_sets.camera_channel_count];

// This defines the positions along the driveline at which to switch to certain
// replay cameras.
typedef struct {
  int camera_channel; // Index into the camera ID array
  float distance_travelled;
  // Seems to be one or zero, but also doesn't have an effect?
  // This is always set to 1 a tiny bit before it's set to 0.
  int unknown;
} ReplayCameraPoint;
ReplayCameraPoint replay_camera_line[animation_sets.camera_line_point_count];

typedef struct {
  int unknown_1;
  float unknown_2;
  float unknown_3;
} B;
B bs[animation_sets.b_count];

struct CameraKeyframes {
  typedef struct {
    int camera_id <format=hex>;
    // 4 = ???
    // 8 = ???
    // 12 = fov key frame
    // 16 = ???
    int mode;
    int keyframes_count;
    int unknown_4;
    typedef struct {
      int unknown_5;
      float fov_driveline_distance;
      float fov;
      float unknown_6;
      float unknown_7;
      float unknown_8;
      float unknown_9;
    } KeyFrame;
    KeyFrame keyframes[keyframes_count];
  } KeyFrames;
  KeyFrames keyframes[animation_sets.camera_keyframes_count] <optimize=false>;
} camera_keyframes;

// TODO figure out this section
typedef struct {
  int unknown_1;
  int unknown_2;
  float unknown_3;
} Unknown_0x41E4;
Unknown_0x41E4 unknown_0x41E4[animation_sets.unknown_0x41E4_count];

struct Unknown_0x43AC {
  int count;
  int items[count];
} unknown_0x43AC;

struct CameraPositions {
  int count;
  typedef struct {
    int camera_id <format=hex>;
    int camera_id_2 <format=hex>;
    int driveline_id <format=hex>;
    int unknown_id <format=hex>;
    // Position of camera in world coordinates
    Position position;
    // All angles are specified in degrees. This is only used for fixed cameras.
    struct Angle {
      // Angle from horizontal. Negative looks upwards.
      float pitch;
      // Angle from horizontal. Positive tilts camera clockwise.
      float roll;
      // 0 Looks in positive Y direction?
      // Positive values turn camera clockwise in plan view.
      float yaw;
    } angle;
    float unknown_5[3]; // All ones?
    int unknown_6;
  } CameraPosition;
  CameraPosition items[count];
} camera_positions;

struct DriveLine {
  int count;
  typedef struct {
    // ID like value
    int driveline_id <format=hex>;
    int unknown_id <format=hex>;
    // This contains some positions which draw out the road (at least on the
    // rally school stage).
    int inner_count;
    // I think these are spline control points.
    typedef struct {
      float unknown_1;
      Position position;
      typedef struct {
        float v[3];
      } Vector3;
      // Appears to be something like a heading. Adding these to positions
      // approximately results in the next point.
      Vector3 control_point_1;
      // Usually a negated version of the vector above.
      Vector3 control_point_2;
      // Distance travelled down the driveline so far
      float distance;
    } DriveLinePoint;
    DriveLinePoint points[inner_count];
  } DriveLinePart;
  DriveLinePart parts[count] <optimize=false>;
} drive_line;

struct CameraSpecs {
  int count;
  typedef struct {
    int camera_id <format=hex>;
    // mode=0: Fixed camera - uses the angle specified in the camera position section.
    // mode=-1: Look at car
    // mode=CameraID: Look at the position of another camera
    // Other modes appear to be interpreted as 0.
    int mode <format=hex>;
    float unknown_2;
    // 0: no wobble. Sensible values are less than 0.5.
    float wobble_factor;
    float unknown_4;
    float unknown_5;
  } CameraSpec;
  CameraSpec cameras[count];
} camera_specs;

int unknown_0x6570;
int unknown_0x6574;
int unknown_0x6578;
typedef struct {
  float unknown_1;
  float unknown_2;
  float unknown_3;
  float unknown_4;
} Unknown_0x6578;
Unknown_0x6578 unknown_0x6578_arr[unknown_0x6578];

struct FinishLinePosition {
  Position position;
  float radius;
} finish_line_position;

struct AnimationIds {
  int count;
  typedef struct {
    int camera_id <format=hex>;
    int unknown_2;
  } AnimationId;
  AnimationId items[count];
} animation_ids;

// TODO I don't know what this is used for
struct DrivelineString {
  int length;
  char str[length];
} driveline_string;